## API란 무엇인가요?
* Application Programming Interface(애플리케이션 프로그램 인터페이스)의 줄임말입니다.
* API는 정의 및 프로토콜 집합을 사용하여 두 소프트웨어 구성 요소가 서로 통신할 수 있게 하는 매커니즘입니다.
* 요청과 응답을 사용하여 두 애플리케이션이 서로 통신하는 방법을 정의합니다.

> 예를 들어, 기상청의 소프트웨어 시스템에는 일일 기상 데이터가 들어 있습니다. <br> 휴대폰의 날씨 앱은 API를 통해 이 시스템과 '대화'하여 휴대폰에 매일 최신 날씨 정보를 표시합니다.

<br>

## REST API란 무엇인가요?
* REST는 Representational State Transfer의 줄임말입니다.
* 자원을 이름으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미합니다.
* REST는 클라이언트가 서버 데이터에 엑세스하는 데 사용할 수 있는 POST, GET, PUT, DELETE 등의 함수 집합을 정의합니다.
* 클라이언트와 서버는 HTTP URI를 통해 자원을 명시하고, 교환합니다.

### 특징
* REST 기반으로 시스템을 분산해 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있습니다.
* 서버가 요청 간에 클라이언트 데이터를 저장하지 않는 무상태를 갖습니다.
* 서버-클라이언트 구조입니다.
* 캐시 처리가 가능합니다.

<br>
## RESTful API는 무엇인가요?
* RESTful은 일반적으로 REST라는 아키텍처를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어입니다.
  * `REST API`를 제공하는 웹 서비스를 `RESTful`하다고 할 수 있습니다.
  * 단, REST 설계 규칙을 잘 지켜진 설계이어야 합니다.
* 효율적인 소프트웨어 통신 표준을 따르므로, 안전하고, 신뢰할 수 있습니다.

<br>

## 프레임워크와 라이브러리 차이에 대해 설명해주세요.
* 이 둘의 차이점은 제어 흐름에 대한 주도권이 어디에 있는가에 있습니다.
* `프레임워크`는 전체적인 흐름을 쥐고 있습니다. -> [제어의 역전](Inversion of Control) 개발자의 제어권을 프레임워크에게 넘김
* `라이브러리`는 개발자가 흐름을 쥐고 있습니다.

> 프레임워크 : 소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합 <br> 라이브러리 : 단순 활용가능한 도구들의 집합

## Call By Value와 Call By Reference의 차이에 대해 설명해주세요.
* Call By Value (값에 의한 호출) : 인자로 받은 값을 복사하여 처리하는 방식입니다.
  * 장점 : 값을 복사하여 처리하기 때문에 원래의 값이 보존됩니다.
  * 단점 : 복사하기 때문에 메모리 사용량이 증가합니다.
* Call By Reference (참조에 의한 호출) : 인자로 받은 값의 주소를 참조하여 직접 저장해 값에 영향을 주는 방식
  * 장점 - 복사하지 않고 직접 참조하기에 빠릅니다.
  * 단점 - 원래의 값이 영향을 받습니다.

### 자세히 알아보기
먼저 이 둘은 함수의 호출방식입니다. 함수가 호출될 때, 메모리 공간 안에서는 함수를 위한 별도의 임시 공간이 생성됩니다. (함수가 종료되면 해당 공간은 사라집니다.)
<br>
* Java의 경우 함수에 전달되는 인자의 데이터 타입에 따라 방식이 달라집니다.
  * 원시 자료형 (primitive type) : `call-by-value` 로 동작 (int, short, long, float, double, char, boolean)
  * 참조 자료형 (reference type) : `call-by-reference` 로 동작 (Array, Class Instance)

